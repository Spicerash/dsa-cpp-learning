/*
Given a string, we have to find out all its subsequences of it. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.

Time Complexity: O(2^n)
The time complexity of this approach is O(2^n), where n is the length of the given string. This is because, for a string of length n, we are generating a total of 2^n subsequences.

Space Complexity: O(n)
The recursive function call stack requires O(n) space for the worst case, where n is the length of the given string.

inorder to understand the logic it is best to dry run the function with string as abc
*/

#include<iostream>
using namespace std;

void printSubsequence(string input, string output) {
    if(input.empty()) {
        cout << output << " ";
        return;
    }

    printSubsequence(input.substr(1), output + input[0]); // required to consider the all the characters in sequence
    printSubsequence(input.substr(1), output); // required to reduce the no of characters considered
}

int main() {
    string s = "abc";
    printSubsequence(s,"");
}
